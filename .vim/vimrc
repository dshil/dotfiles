call plug#begin('~/.vim/plugged') " Directory for plugins

" Dependencies:
Plug 'tpope/vim-rhubarb'           " Depenency for tpope/fugitive

" Languages:
Plug 'fatih/vim-go'

" General:
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'

call plug#end()

" Varios plugins settings

"----------------------------------------------
" Plugin: 'junegunn/fzf.vim'
"----------------------------------------------
nnoremap <c-p> :FZF<cr>
"----------------------------------------------

"----------------------------------------------
" Plugin: 'majutsushi/tagbar'
"----------------------------------------------
" Language: Go
" Tagbar configuration for Golang
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
"----------------------------------------------

fun! InstallGeneralSettings()
    let g:mapleader = "," " Set the mapleader.

    " Disable the CtrlP mapping, since we want to use FZF instead for <c-p>.
    let g:ctrlp_map = ''

    " Symbols for invisible characters (tab, eol).
    set list
    set listchars=tab:▸\ ,eol:¬

    " Default indentation.
    " ts - tabstop
    " sts - softtabstop (insert mode)
    " sw - shiftwidth (normal mode)
    set ts=4 sts=4 sw=4 expandtab

    " Default column ruler.
    set colorcolumn=80
    set clipboard=unnamed

    " Mapping for coping to a clipboard.
    vnoremap <C-c> "+y

    let g:seoul256_background = 235
    colo seoul256

    " Show line number.
    set number
    set laststatus=2

    " Don't show an error during the work with buffers.
    set hidden
    set backspace=2
    set noerrorbells                  " No bells!
    set novisualbell                  " I said, no bells!
    set ruler

    " Search
    set incsearch                     " move to match as you type the search query
    set hlsearch                      " enable search result highlighting

    " Speedup ruby highlighting by falling back to old regexp vim engine.
    " https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
    set re=1
    set lazyredraw

    filetype plugin indent on

    " Set different indentation for different types of files.
    if has("autocmd")
        " Enable file type detection.
        filetype on

        " Apply only for current buffer.
        autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
        autocmd FileType ruby,yml setlocal ts=2 sts=2 sw=2 expandtab nocursorline
        autocmd FileType go setlocal ts=4 sts=4 sw=4 noexpandtab

        call SetPythonLocalSettings()
        call SetCLocalSettings()
        call SetGoLocalSettings()
        call SetRubyLocalSettings()

        autocmd BufWritePre * call StripTrailingWhiteSpaces()
        autocmd BufWritePre *.rb,*.c,*.cpp call SquashBlankLines()

        autocmd bufwritepost *.vimrc source $MYVIMRC
    endif

    " Enable mouse if possible
    if has('mouse')
        set mouse=a
    endif

    set splitbelow
    set splitright
endfun

fun! SetMappings()
    nmap<leader>v :tabedit $MYVIMRC<CR>
    map <C-n> :NERDTreeToggle<CR>

    " Mapping for a turn off terminal mode.
    tnoremap <C-d> <C-\><C-n>
    map <C-b> :TagbarToggle<CR>

    " Disable the following keys.
    noremap <Up> <Nop>
    noremap <Down> <Nop>
    noremap <Left> <Nop>
    noremap <Right> <Nop>

    " Makes the switching between buffers easy.
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l

    nmap <C-s> :Goyo<CR>

    " Center the screen quickly
    nnoremap <space> zz

    " Clear search highlights
    map <leader>m :nohlsearch<cr>

    " These mappings will make it so that going to the next one in a search will
    " center on the line it's found in.
    nnoremap n nzzzv
    nnoremap N Nzzzv

    " Creating splits
    nnoremap <leader>k :vsplit<cr>
    nnoremap <leader>h :split<cr>
    nnoremap <leader>q :close<cr>
endfun

" Executes an input command and saves the current state.
fun! ExecAndSave(cmd)
    " Save the last search.
    let _s=@/

    " Save the cursor position.
    let pos=getpos(".")

    " Exec a command.
    execute a:cmd

    " Restore the search and the cursor position.
    let @/=_s
    call setpos(".", pos)
endfun

" Deletes extra white spaces.
fun! StripTrailingWhiteSpaces()
    call ExecAndSave("%s/\\s\\+$//e")
endfun

" Deletes extra blank lines.
fun! SquashBlankLines()
    call ExecAndSave(":g/^\\_$\\n\\_^$/d")
endfun

" Sets local settings for python files.
fun! SetPythonLocalSettings()
    autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python setlocal colorcolumn=80
endfun

" Sets local settings for C files.
fun! SetCLocalSettings()
    autocmd FileType c setlocal ts=4 sts=4 sw=4 noexpandtab
    autocmd FileType c setlocal colorcolumn=80
endfun

" Sets local settings for Go files.
fun! SetGoLocalSettings()
    autocmd FileType go setlocal colorcolumn=90

    let g:go_disable_autoinstall = 0
    let g:go_highlight_types = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"

    " gometalinter configuration
    let g:go_metalinter_command = ""
    let g:go_metalinter_deadline = "5s"
    let g:go_metalinter_enabled = [
        \ 'deadcode',
        \ 'errcheck',
        \ 'goconst',
        \ 'gocyclo',
        \ 'golint',
        \ 'gosimple',
        \ 'ineffassign',
        \ 'vet',
        \ 'vetshadow'
    \]

    autocmd FileType go map <leader>b <Plug>(go-build)
    autocmd FileType go map <leader>t <Plug>(go-test)
    autocmd FileType go map <leader>v <Plug>(go-vet)
    autocmd FileType go map <Leader>ds <Plug>(go-def-split)
    autocmd FileType go map <Leader>dv <Plug>(go-def-vertical)
    autocmd FileType go map <Leader>dt <Plug>(go-def-tab)
    autocmd FileType go map <Leader>gd <Plug>(go-doc)
    autocmd FileType go map <Leader>gv <Plug>(go-doc-vertical)
    autocmd FileType go map <Leader>gb <Plug>(go-doc-browser)
    autocmd FileType go map <Leader>s <Plug>(go-implements)
    autocmd FileType go map <Leader>e <Plug>(go-rename)
    autocmd FileType go map <leader>c :GoCoverageBrowser<CR>
    autocmd FileType go map <leader>r :GoReferrers<CR>
    autocmd FileType go map <leader>l :GoLint<CR>
endfun

fun! SetRubyLocalSettings()
    autocmd FileType ruby setlocal colorcolumn=80
endfun

fun! SetupNetrw()
    let g:netrw_liststyle=3 " Use a tree-mode as a default view
    let g:netrw_browse_split=4 " Open a file in a previous buffer
    let g:netrw_preview=1 " A preview window will be shown in a vertically split
    let g:netrw_winsize=20 " A preview file takes 80% and the file explorer - 20%
    nmap <leader>n :e.<CR>
endfun

fun! SetupMisspellings()
    nmap <silent> <leader>f :set spell!<CR>

    " Set a default region to American English
    set spelllang=en_us
endfun

call InstallGeneralSettings()
call SetMappings()
call SetupMisspellings()
call SetupNetrw()
